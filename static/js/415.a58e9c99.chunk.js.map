{"version":3,"file":"static/js/415.a58e9c99.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactBook/ContactForm/ContactForm.jsx","components/ContactBook/ContactListItem/ContactListItem.jsx","components/ContactBook/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactBook/Filter/Filter.module.css?a6b8","components/ContactBook/Filter/Filter.jsx","components/ContactBook/Loader/Loader.jsx","components/ContactBook/ContactBook.jsx","components/Section/Section.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.item;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport toast from 'react-hot-toast';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { Button, FormLabel, Input, VStack } from '@chakra-ui/react';\nimport { Section } from 'components/Section/Section';\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Please enter the name')\n    .min(3, 'Name must have more the 3 letter')\n    .max(30, 'Name must have less then 30 letter')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required('Please enter the number')\n    .min(6, 'Number of phone must have more then 6 number')\n    .max(14, 'Number of phone must have less then 15 number')\n    .matches(\n      /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (user, { resetForm }) => {\n    if (contacts.some(contact => contact.name === user.name)) {\n      toast.error(`${user.name} is already in contacts`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(user));\n    resetForm();\n  };\n\n  return (\n    <Section title=\"Phonebook\" height={400}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={6} align=\"flex-start\">\n              <FormLabel htmlFor=\"name\">Contact Name</FormLabel>\n              <Field\n                as={Input}\n                id=\"name\"\n                name=\"name\"\n                type=\"name\"\n                variant=\"filled\"\n              />\n              <ErrorMessage name=\"name\" />\n              <FormLabel htmlFor=\"number\">Number</FormLabel>\n              <Field\n                as={Input}\n                id=\"number\"\n                name=\"number\"\n                type=\"number\"\n                variant=\"filled\"\n                autoComplete=\"current-password\"\n              />\n              <ErrorMessage name=\"number\" />\n              <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                Add Contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Section>\n\n    // <Formik\n    //   initialValues={initialValues}\n    //   onSubmit={handleSubmit}\n    //   validationSchema={validationSchema}\n    // >\n    //   <Form className={css.form}>\n    //     <label className={css.label}>\n    //       Name\n    //       <Field className={css.input} type=\"text\" name=\"name\" />\n    //       <ErrorMessage name=\"name\" />\n    //     </label>\n    //     <label className={css.label}>\n    //       Number\n    //       <Field className={css.input} type=\"tel\" name=\"number\" />\n    //       <ErrorMessage name=\"number\" />\n    //     </label>\n    //     <button className={css.btnSubmit} type=\"submit\">\n    //       add contact\n    //     </button>\n    //   </Form>\n    // </Formik>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\n// import { useSelector } from 'react-redux';\n// import { getIsLoading } from 'redux/contactsSelectors';\nimport { Button } from '@chakra-ui/react';\nimport { ListItem } from '@chakra-ui/react';\nexport function ContactListItem({ user }) {\n  // const isLoadingg = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  const { id, name, number } = user;\n  return (\n    <ListItem\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      mb=\"20px\"\n    >\n      {name}: {number}\n      <Button\n        h={30}\n        colorScheme=\"teal\"\n        variant=\"outline\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </Button>\n    </ListItem>\n  );\n}\n\nContactListItem.propTypes = {\n  user: PropTypes.object,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContactListItem } from 'components/ContactBook/ContactListItem/ContactListItem';\nimport { getContacts, getFilter } from 'redux/contacts/contactsSelectors';\nimport { OrderedList } from '@chakra-ui/react';\n\nconst UserList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  function renderByFilter() {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n\n  return (\n    <OrderedList width={300} mt=\"20px\" fontFamily=\"sans-serif\" fontSize={16}>\n      {renderByFilter().map(contact => (\n        <ContactListItem key={contact.id} user={contact} />\n      ))}\n      {}\n    </OrderedList>\n  );\n};\n\nexport default UserList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__HNnTn\"};","import React from 'react';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contatsReducer';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  function onChangeFilter(e) {\n    let filterField = e.target.value;\n    dispatch(filterContacts(filterField));\n  }\n\n  return (\n    <input\n      className={css.filter}\n      type=\"text\"\n      name=\"filter\"\n      onChange={onChangeFilter}\n    />\n  );\n};\n\nexport default Filter;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport styled from 'styled-components';\n\nconst LoaderWrap = styled.div`\n  text-align: center;\n`;\n\nexport default function Loader() {\n  return (\n    <LoaderWrap>\n      <InfinitySpin width=\"200\" color=\"#4fa94d\" />\n    </LoaderWrap>\n  );\n}\n","import React from 'react';\n\nimport { ContactForm } from './ContactForm/ContactForm';\nimport UserList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { Section } from 'components/Section/Section';\nimport { Toaster } from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport { fetchContact } from 'redux/contacts/contactsOperation';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport Loader from './Loader/Loader';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../../redux/contacts/contactsSelectors';\nexport default function ContactBook() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        bgColor=\"gray.100\"\n        h=\"100vh\"\n        // flexDirection=\"column\"\n        justifyContent=\"space-between\"\n        // alignItems=\"center\"\n        p={30}\n      >\n        <ContactForm />\n        <Section title=\"Contacts\" width={400} height=\"auto\">\n          <Filter />\n          {!!contacts.length && <UserList />}\n          {isLoading && <Loader />}\n        </Section>\n        <Toaster position=\"top-right\" reverseOrder={true} />\n      </Box>\n    </>\n  );\n}\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading } from '@chakra-ui/react';\nexport function Section({ title, height, width = '300', children }) {\n  return (\n    <Box\n      bg=\"white\"\n      p={8}\n      rounded=\"md\"\n      w={width}\n      h={height}\n      mt=\"200px\"\n      textAlign=\"center\"\n    >\n      <Heading as=\"h2\" mb=\"20px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["getContacts","state","contacts","item","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","validationSchema","Yup","shape","required","min","max","matches","ContactForm","dispatch","useDispatch","useSelector","Section","title","height","onSubmit","user","resetForm","some","contact","toast","addContact","handleSubmit","errors","touched","spacing","align","htmlFor","as","Input","id","type","variant","autoComplete","colorScheme","width","ContactListItem","display","alignItems","justifyContent","mb","h","onClick","deleteContact","mt","fontFamily","fontSize","toLowerCase","includes","map","className","css","onChange","e","filterField","target","value","filterContacts","LoaderWrap","styled","Loader","color","ContactBook","useEffect","fetchContact","bgColor","p","length","position","reverseOrder","children","bg","rounded","w","textAlign"],"sourceRoot":""}