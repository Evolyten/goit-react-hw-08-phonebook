{"version":3,"file":"static/js/730.87a5d6eb.chunk.js","mappings":"sQAkBMA,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CJ,MAAOG,EAAAA,KACJE,SAAS,0BACTC,QACC,uDACA,qBAGJL,SAAUE,EAAAA,KACPE,SAAS,6BACTE,IAAI,EAAG,yCACPC,IAAI,GAAI,qDA4Gb,UAzGkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CAAMC,GAAG,kBAAkBC,QAAQ,SAASC,EAAE,QAA9C,UACE,SAAC,EAAAC,QAAD,CAASC,MAAM,cAAcC,OAAQ,IAAKC,MAAO,IAAjD,UACE,SAAC,KAAD,CACElB,cAAeA,EACfmB,SAVa,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UAC5BX,GAASY,EAAAA,EAAAA,IAAMF,IACfC,GACD,EAQOlB,iBAAkBA,EAHpB,SAKG,gBAAGoB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMN,SAAUI,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGC,MAAM,aAA1B,WACE,UAAC,KAAD,CAAaC,YAAaJ,EAAOvB,OAASwB,EAAQxB,MAAlD,WACE,SAAC,KAAD,CAAW4B,QAAQ,WACnB,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,cAAc,OACdC,UAAU,SAAC,KAAD,CAAWC,MAAM,gBAE7B,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,aAAa,WACbC,YAAY,QACZC,GAAG,gBAIT,SAAC,KAAD,CAAcL,KAAK,WAEnB,UAAC,KAAD,CAAaR,YAAaJ,EAAOtB,UAAYuB,EAAQvB,SAArD,WACE,SAAC,KAAD,CAAW2B,QAAQ,cACnB,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,cAAc,OACdC,UAAU,SAAC,KAAD,CAAYC,MAAM,gBAE9B,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRC,aAAa,mBACbC,YAAY,WACZC,GAAG,aAGP,SAAC,KAAD,CAAcL,KAAK,iBAGrB,SAAC,KAAD,CAAQC,KAAK,SAASK,YAAY,SAASxB,MAAM,OAAjD,uBA7CL,OAwFV,C,2FC1IM,SAASH,EAAT,GAAgE,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAqC,IAA7BC,MAAAA,OAA6B,MAArB,QAAqB,EAAZa,EAAY,EAAZA,SACxD,OACE,UAAC,KAAD,CACEnB,GAAG,QACH+B,EAAE,OACFC,QAAQ,KACRC,EAAG3B,EACHJ,EAAGG,EACH6B,GAAG,OACHC,UAAU,SAPZ,WASE,SAAC,KAAD,CAASd,GAAG,KAAKe,GAAG,OAApB,SACGhC,IAEFe,IAGN,C","sources":["components/LogInForm/LogInForm.jsx","components/Section/Section.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { logIn } from 'redux/auth/authOperation';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Section } from 'components/Section/Section';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  InputLeftElement,\n  InputGroup,\n} from '@chakra-ui/react';\nimport { UnlockIcon, EmailIcon } from '@chakra-ui/icons';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Please enter the email')\n    .matches(\n      /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-z]+)$/,\n      'Not correct email'\n    ),\n\n  password: Yup.string()\n    .required('Please enter the password')\n    .min(7, 'Password must have more then 6 number')\n    .max(14, 'Password of phone must have less then 15 number'),\n});\n\nconst LogInForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (user, { resetForm }) => {\n    dispatch(logIn(user));\n    resetForm();\n  };\n\n  return (\n    <Flex bg=\"rgb(52, 56, 61)\" justify=\"center\" h=\"100vh\">\n      <Section title=\"Log In Form\" height={350} width={400}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={6} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <FormLabel htmlFor=\"email\"></FormLabel>\n                  <InputGroup>\n                    <InputLeftElement\n                      pointerEvents=\"none\"\n                      children={<EmailIcon color=\"gray.300\" />}\n                    />\n                    <Field\n                      as={Input}\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"filled\"\n                      autoComplete=\"username\"\n                      placeholder=\"Email\"\n                      pl=\"40px\"\n                    />\n                  </InputGroup>\n                </FormControl>\n                <ErrorMessage name=\"email\" />\n\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\"></FormLabel>\n                  <InputGroup>\n                    <InputLeftElement\n                      pointerEvents=\"none\"\n                      children={<UnlockIcon color=\"gray.300\" />}\n                    />\n                    <Field\n                      as={Input}\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      variant=\"filled\"\n                      autoComplete=\"current-password\"\n                      placeholder=\"Password\"\n                      pl=\"40px\"\n                    />\n                  </InputGroup>\n                  <ErrorMessage name=\"password\" />\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Section>\n    </Flex>\n    // <Section title=\"Log In\">\n    //   <Formik\n    //     initialValues={initialValues}\n    //     onSubmit={handleSubmit}\n    //     validationSchema={validationSchema}\n    //   >\n    //     <Form className={css.form}>\n    //       <label className={css.label}>\n    //         Email\n    //         <Field\n    //           className={css.input}\n    //           type=\"email\"\n    //           name=\"email\"\n    //           autoComplete=\"username\"\n    //         />\n    //         <ErrorMessage name=\"email\" />\n    //       </label>\n    //       <label className={css.label}>\n    //         Password\n    //         <Field\n    //           className={css.input}\n    //           type=\"password\"\n    //           name=\"password\"\n    //           autoComplete=\"current-password\"\n    //         />\n    //         <ErrorMessage name=\"password\" />\n    //       </label>\n    //       <button className={css.btnSubmit} type=\"submit\">\n    //         Log In\n    //       </button>\n    //     </Form>\n    //   </Formik>\n    // </Section>\n  );\n};\n\nexport default LogInForm;\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading } from '@chakra-ui/react';\nexport function Section({ title, height, width = '350px', children }) {\n  return (\n    <Box\n      bg=\"white\"\n      p=\"15px\"\n      rounded=\"md\"\n      w={width}\n      h={height}\n      mt=\"50px\"\n      textAlign=\"center\"\n    >\n      <Heading as=\"h2\" mb=\"15px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["initialValues","email","password","validationSchema","Yup","shape","required","matches","min","max","dispatch","useDispatch","bg","justify","h","Section","title","height","width","onSubmit","user","resetForm","logIn","handleSubmit","errors","touched","spacing","align","isInvalid","htmlFor","pointerEvents","children","color","as","Input","id","name","type","variant","autoComplete","placeholder","pl","colorScheme","p","rounded","w","mt","textAlign","mb"],"sourceRoot":""}