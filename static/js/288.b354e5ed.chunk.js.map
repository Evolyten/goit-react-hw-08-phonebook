{"version":3,"file":"static/js/288.b354e5ed.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactBook/ContactForm/ContactForm.jsx","components/ContactBook/ContactListItem/ContactListItem.jsx","components/ContactBook/ContactList/ContactList.jsx","components/ContactBook/Filter/Filter.jsx","components/ContactBook/Loader/Loader.jsx","components/ContactBook/ContactBook.jsx","components/Section/Section.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.item;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport {\n  Button,\n  FormLabel,\n  Input,\n  VStack,\n  InputLeftElement,\n  InputGroup,\n  useColorMode,\n  FormControl,\n} from '@chakra-ui/react';\nimport { Section } from 'components/Section/Section';\nimport { ToastFailedContact } from 'components/Toast/Toast';\nimport { ChatIcon, PhoneIcon } from '@chakra-ui/icons';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Please enter the name')\n    .min(3, 'Name must have more the 3 letter')\n    .max(30, 'Name must have less then 30 letter')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required('Please enter the number')\n    .min(6, 'Number of phone must have more then 6 number')\n    .max(14, 'Number of phone must have less then 15 number')\n    .matches(\n      /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const { colorMode } = useColorMode();\n\n  const handleSubmit = (user, { resetForm }) => {\n    if (contacts.some(contact => contact.name === user.name)) {\n      ToastFailedContact(user.name);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(user));\n    resetForm();\n  };\n\n  return (\n    <Section title=\"Phonebook\" width={{ sm: '290px', lg: '350px' }}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={4} align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\"></FormLabel>\n                <InputGroup flexDirection=\"column\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<ChatIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                    placeholder=\"Contact Name\"\n                    pl=\"40px\"\n                  />\n                  <ErrorMessage name=\"name\" />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"number\"></FormLabel>\n                <InputGroup flexDirection=\"column\" marginTop=\"0\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<PhoneIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    autoComplete=\"current-password\"\n                    placeholder=\"Phone Number\"\n                    pl=\"40px\"\n                  />\n                  <ErrorMessage name=\"number\" />\n                </InputGroup>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                colorScheme=\"blue\"\n                backgroundColor={colorMode === 'dark' ? 'blue.600' : 'blue.400'}\n                color=\"#fff\"\n                width=\"full\"\n                marginTop=\"20px\"\n              >\n                Add Contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Section>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\nimport { Box, Button, Text, useColorMode } from '@chakra-ui/react';\nimport { ListItem } from '@chakra-ui/react';\nimport { useState } from 'react';\nexport function ContactListItem({ user }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n\n  function Loading() {\n    setIsLoading(true);\n  }\n  const { id, name, number } = user;\n  return (\n    <ListItem\n      width=\"80%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      textAlign=\"left\"\n      justifyContent=\"space-between\"\n      mb=\"20px\"\n      border=\"1px solid black\"\n      borderRadius=\"10px\"\n      p=\"10px\"\n      borderColor={colorMode === 'dark' ? 'blue.600' : 'blue.400'}\n      fontFamily=\"Roboto\"\n    >\n      <Box as=\"div\">\n        <Text>Contact name: {name}</Text>\n      </Box>\n      <Box as=\"div\">\n        <Text fontFamily=\"Roboto\">\n          Phone number:\n          <Box ml=\"5px\" as=\"a\" textDecor=\"underline\" href={`tel:${number}`}>\n            {number}\n          </Box>\n        </Text>\n      </Box>\n      <Button\n        h={30}\n        isLoading={isLoading}\n        borderColor=\"blue.400\"\n        variant=\"outline\"\n        w=\"80%\"\n        m=\"0 auto\"\n        mt=\"10px\"\n        onClick={e => {\n          console.log(e.target);\n          e.target.setAttribute('isLoading', 'true');\n          Loading();\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </Button>\n    </ListItem>\n  );\n}\n\nContactListItem.propTypes = {\n  user: PropTypes.object,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContactListItem } from 'components/ContactBook/ContactListItem/ContactListItem';\nimport { getContacts, getFilter } from 'redux/contacts/contactsSelectors';\nimport { OrderedList } from '@chakra-ui/react';\n\nconst UserList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  function renderByFilter() {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n\n  return (\n    <OrderedList\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      width=\"100%\"\n      margin=\"0\"\n      mt=\"20px\"\n      fontFamily=\"sans-serif\"\n      fontSize={16}\n      h=\"650px\"\n      overflow=\"auto\"\n    >\n      {renderByFilter().map(contact => (\n        <ContactListItem key={contact.id} user={contact} />\n      ))}\n      {}\n    </OrderedList>\n  );\n};\n\nexport default UserList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contatsReducer';\nimport {\n  Input,\n  useColorMode,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { BsSearch } from 'react-icons/bs';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n\n  function onChangeFilter(e) {\n    let filterField = e.target.value;\n    dispatch(filterContacts(filterField));\n  }\n\n  return (\n    <InputGroup>\n      <InputLeftElement children={<BsSearch />} />\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        onChange={onChangeFilter}\n        variant=\"flushed\"\n        placeholder=\"Enter contact name\"\n        borderBottomColor={colorMode === 'dark' ? 'blue.600' : 'blue.400'}\n      />\n    </InputGroup>\n  );\n};\n\nexport default Filter;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport styled from 'styled-components';\n\nconst LoaderWrap = styled.div`\n  text-align: center;\n`;\n\nexport default function Loader() {\n  return (\n    <LoaderWrap>\n      <InfinitySpin width=\"200\" color=\"#4fa94d\" />\n    </LoaderWrap>\n  );\n}\n","import React from 'react';\n\nimport { ContactForm } from './ContactForm/ContactForm';\nimport UserList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { Section } from 'components/Section/Section';\nimport { useSelector } from 'react-redux';\nimport { fetchContact } from 'redux/contacts/contactsOperation';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport Loader from './Loader/Loader';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../../redux/contacts/contactsSelectors';\nexport default function ContactBook() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n  return (\n    <>\n      <Box\n        display={{ sm: 'block', md: 'flex' }}\n        justifyContent=\"space-between\"\n        width={{ sm: '320px', md: '768px', lg: '960px', xl: '1200px' }}\n        p={{ sm: '15px', md: '30px' }}\n        m=\"0 auto\"\n      >\n        <ContactForm />\n        <Section\n          title=\"Contacts\"\n          width={{ sm: '290px', lg: '350px' }}\n          height=\"auto\"\n        >\n          <Filter />\n          {!!contacts.length && <UserList />}\n          {isLoading && <Loader />}\n        </Section>\n      </Box>\n    </>\n  );\n}\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading, useColorMode } from '@chakra-ui/react';\n\nexport function Section({ title, width = '350px', children }) {\n  const { colorMode } = useColorMode();\n\n  return (\n    <Box\n      as=\"div\"\n      // bg={colorMode === 'dark' ? 'gray.50' : 'blue'}\n      // p=\"10px\"\n      rounded=\"4px\"\n      w={width}\n      m=\"0 auto\"\n      mt=\"50px\"\n      textAlign=\"center\"\n      color={colorMode === 'dark' ? 'gray.200' : 'black'}\n    >\n      <Heading as=\"h2\" mb=\"15px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["getContacts","state","contacts","item","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","validationSchema","Yup","shape","required","min","max","matches","ContactForm","dispatch","useDispatch","useSelector","colorMode","useColorMode","Section","title","width","sm","lg","onSubmit","user","resetForm","some","contact","ToastFailedContact","addContact","handleSubmit","errors","touched","spacing","align","htmlFor","flexDirection","pointerEvents","children","color","as","Input","id","type","variant","placeholder","pl","marginTop","autoComplete","colorScheme","backgroundColor","ContactListItem","useState","setIsLoading","display","textAlign","justifyContent","mb","border","borderRadius","p","borderColor","fontFamily","ml","textDecor","href","h","w","m","mt","onClick","e","console","log","target","setAttribute","deleteContact","alignItems","margin","fontSize","overflow","toLowerCase","includes","map","onChange","filterField","value","filterContacts","borderBottomColor","LoaderWrap","styled","Loader","ContactBook","useEffect","fetchContact","md","xl","height","length","rounded"],"sourceRoot":""}