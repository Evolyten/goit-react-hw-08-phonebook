{"version":3,"file":"static/js/902.2d1ad7dc.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationFrom.jsx","components/Section/Section.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { register } from 'redux/auth/authOperation';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Section } from 'components/Section/Section';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  InputLeftElement,\n  InputGroup,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { UnlockIcon, EmailIcon, ChatIcon } from '@chakra-ui/icons';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Please enter the name')\n    .min(3, 'Name must have more the 3 letter')\n    .max(30, 'Name must have less then 30 letter')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer'\n    ),\n  email: Yup.string()\n    .required('Please enter the number')\n    .matches(\n      /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-z]+)$/,\n      'example qwerr@mail.com'\n    ),\n  password: Yup.string().min(7, 'Minimum 7 letters'),\n});\n\nconst RegistrationForm = () => {\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n\n  const handleSubmit = (user, { resetForm }) => {\n    console.log(user);\n\n    dispatch(register(user));\n    resetForm();\n  };\n\n  return (\n    <Section\n      title=\"Registration\"\n      height={450}\n      width={{ sm: '290px', md: '400px' }}\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={6} align=\"flex-start\">\n              <FormControl isInvalid={!!errors.name && touched.name}>\n                <FormLabel htmlFor=\"name\"></FormLabel>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<ChatIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                    placeholder=\"User Name\"\n                    pl=\"40px\"\n                  />\n                </InputGroup>\n              </FormControl>\n              <ErrorMessage name=\"name\" />\n              <FormControl isInvalid={!!errors.email && touched.email}>\n                <FormLabel htmlFor=\"email\"></FormLabel>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<EmailIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    autoComplete=\"username\"\n                    placeholder=\"Email\"\n                    pl=\"40px\"\n                  />\n                </InputGroup>\n              </FormControl>\n              <ErrorMessage name=\"email\" />\n\n              <FormControl isInvalid={!!errors.password && touched.password}>\n                <FormLabel htmlFor=\"password\"></FormLabel>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<UnlockIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    autoComplete=\"current-password\"\n                    placeholder=\"Password\"\n                    pl=\"40px\"\n                  />\n                </InputGroup>\n                <ErrorMessage name=\"password\" />\n              </FormControl>\n\n              <Button\n                mt={40}\n                type=\"submit\"\n                colorScheme=\"blue\"\n                width=\"full\"\n                backgroundColor={colorMode === 'dark' ? 'blue.600' : 'blue.400'}\n                color=\"#fff\"\n              >\n                Login\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Section>\n  );\n};\n\nexport default RegistrationForm;\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading, useColorMode } from '@chakra-ui/react';\n\nexport function Section({ title, width = '350px', children }) {\n  const { colorMode } = useColorMode();\n\n  return (\n    <Box\n      as=\"div\"\n      // bg={colorMode === 'dark' ? 'gray.50' : 'blue'}\n      // p=\"10px\"\n      rounded=\"4px\"\n      w={width}\n      m=\"0 auto\"\n      mt=\"50px\"\n      textAlign=\"center\"\n      color={colorMode === 'dark' ? 'gray.200' : 'black'}\n    >\n      <Heading as=\"h2\" mb=\"15px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["initialValues","name","email","password","validationSchema","Yup","shape","required","min","max","matches","dispatch","useDispatch","colorMode","useColorMode","Section","title","height","width","sm","md","onSubmit","user","resetForm","console","log","register","handleSubmit","errors","touched","spacing","align","isInvalid","htmlFor","pointerEvents","children","color","as","Input","id","type","variant","placeholder","pl","autoComplete","mt","colorScheme","backgroundColor","rounded","w","m","textAlign","mb"],"sourceRoot":""}