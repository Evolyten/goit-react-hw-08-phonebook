{"version":3,"file":"static/js/902.2fb31c9a.chunk.js","mappings":"4PAeMA,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CL,KAAMI,EAAAA,KACHE,SAAS,yBACTC,IAAI,EAAG,oCACPC,IAAI,GAAI,sCACRC,QACC,yHACA,0IAEJR,MAAOG,EAAAA,KACJE,SAAS,2BACTG,QACC,uDACA,qBAEJP,SAAUE,EAAAA,KAAaG,IAAI,EAAG,uBAgHhC,UA7GyB,WACvB,IAAMG,GAAWC,EAAAA,EAAAA,MASjB,OACE,SAAC,KAAD,CAAMC,GAAG,WAAWC,QAAQ,SAASC,EAAE,QAAvC,UACE,SAAC,EAAAC,QAAD,CAASC,MAAM,eAAeC,OAAQ,IAAKC,MAAO,IAAlD,UACE,SAAC,KAAD,CACEnB,cAAeA,EACfoB,SAZa,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UAC5BC,QAAQC,IAAIH,GAEZV,GAASc,EAAAA,EAAAA,IAASJ,IAClBC,GACD,EAQOlB,iBAAkBA,EAHpB,SAKG,gBAAGsB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMR,SAAUM,EAAhB,UACE,UAAC,KAAD,CAAQX,EAAG,IAAKc,QAAS,EAAGC,MAAM,aAAlC,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWC,QAAQ,OAAnB,2BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,OACHjC,KAAK,OACLkC,KAAK,OACLC,QAAQ,eAGZ,SAAC,KAAD,CAAcnC,KAAK,UACnB,UAAC,KAAD,YACE,SAAC,KAAD,CAAW8B,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHjC,KAAK,QACLkC,KAAK,QACLC,QAAQ,SACRC,aAAa,iBAGjB,SAAC,KAAD,CAAcpC,KAAK,WAEnB,UAAC,KAAD,CAAaqC,YAAaX,EAAOxB,UAAYyB,EAAQzB,SAArD,WACE,SAAC,KAAD,CAAW4B,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHjC,KAAK,WACLkC,KAAK,WACLC,QAAQ,SACRC,aAAa,sBAEf,SAAC,KAAD,CAAcpC,KAAK,iBAGrB,SAAC,KAAD,CAAQsC,GAAI,GAAIJ,KAAK,SAASK,YAAY,SAASrB,MAAM,OAAzD,uBAxCL,OAyFV,C,2FChJM,SAASH,EAAT,GAA8D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,OAAmC,IAA3BC,MAAAA,OAA2B,MAAnB,MAAmB,EAAZsB,EAAY,EAAZA,SACtD,OACE,UAAC,KAAD,CACE5B,GAAG,QACH6B,EAAG,EACHC,QAAQ,KACRC,EAAGzB,EACHJ,EAAGG,EACHqB,GAAG,QACHM,UAAU,SAPZ,WASE,SAAC,KAAD,CAASb,GAAG,KAAKc,GAAG,OAApB,SACG7B,IAEFwB,IAGN,C","sources":["components/RegistrationForm/RegistrationFrom.jsx","components/Section/Section.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { register } from 'redux/auth/authOperation';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Section } from 'components/Section/Section';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Please enter the name')\n    .min(3, 'Name must have more the 3 letter')\n    .max(30, 'Name must have less then 30 letter')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  email: Yup.string()\n    .required('Please enter the number')\n    .matches(\n      /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-z]+)$/,\n      'Not correct email'\n    ),\n  password: Yup.string().min(7, 'Minimum 7 letters'),\n});\n\nconst RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (user, { resetForm }) => {\n    console.log(user);\n\n    dispatch(register(user));\n    resetForm();\n  };\n\n  return (\n    <Flex bg=\"gray.100\" justify=\"center\" h=\"100vh\">\n      <Section title=\"Registration\" height={450} width={400}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack h={400} spacing={6} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Contact Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <ErrorMessage name=\"name\" />\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    autoComplete=\"username\"\n                  />\n                </FormControl>\n                <ErrorMessage name=\"email\" />\n\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    autoComplete=\"current-password\"\n                  />\n                  <ErrorMessage name=\"password\" />\n                </FormControl>\n\n                <Button mt={40} type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Section>\n    </Flex>\n\n    // <Section title=\"Registration\">\n    //   <Formik\n    //     initialValues={initialValues}\n    //     onSubmit={handleSubmit}\n    //     validationSchema={validationSchema}\n    //   >\n    //     <Form className={css.form}>\n    //       <label className={css.label}>\n    //         Name\n    //         <Field className={css.input} type=\"text\" name=\"name\" />\n    //         <ErrorMessage name=\"name\" />\n    //       </label>\n    //       <label className={css.label}>\n    //         Email\n    //         <Field\n    //           className={css.input}\n    //           type=\"email\"\n    //           name=\"email\"\n    //           autoComplete=\"username\"\n    //         />\n    //         <ErrorMessage name=\"email\" />\n    //       </label>\n    //       <label className={css.label}>\n    //         Password\n    //         <Field\n    //           className={css.input}\n    //           type=\"password\"\n    //           name=\"password\"\n    //           autoComplete=\"new-password\"\n    //         />\n    //         <ErrorMessage name=\"password\" />\n    //       </label>\n    //       <button className={css.btnSubmit} type=\"submit\">\n    //         Registration\n    //       </button>\n    //     </Form>\n    //   </Formik>\n    // </Section>\n  );\n};\n\nexport default RegistrationForm;\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading } from '@chakra-ui/react';\nexport function Section({ title, height, width = '300', children }) {\n  return (\n    <Box\n      bg=\"white\"\n      p={8}\n      rounded=\"md\"\n      w={width}\n      h={height}\n      mt=\"200px\"\n      textAlign=\"center\"\n    >\n      <Heading as=\"h2\" mb=\"20px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["initialValues","name","email","password","validationSchema","Yup","shape","required","min","max","matches","dispatch","useDispatch","bg","justify","h","Section","title","height","width","onSubmit","user","resetForm","console","log","register","handleSubmit","errors","touched","spacing","align","htmlFor","as","Input","id","type","variant","autoComplete","isInvalid","mt","colorScheme","children","p","rounded","w","textAlign","mb"],"sourceRoot":""}