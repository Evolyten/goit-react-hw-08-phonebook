{"version":3,"file":"static/js/730.bdb740c5.chunk.js","mappings":"4PAeMA,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CJ,MAAOG,EAAAA,KACJE,SAAS,0BACTC,QACC,uDACA,qBAGJL,SAAUE,EAAAA,KACPE,SAAS,6BACTE,IAAI,EAAG,kDACPC,IAAI,GAAI,qDA4Fb,UAzFkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CAAMC,GAAG,WAAWC,QAAQ,SAASC,EAAE,QAAvC,UACE,SAAC,EAAAC,QAAD,CAASC,MAAM,SAASC,OAAQ,IAAhC,UACE,SAAC,KAAD,CACEjB,cAAeA,EACfkB,SAVa,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UAC5BV,GAASW,EAAAA,EAAAA,IAAMF,IACfC,GACD,EAQOjB,iBAAkBA,EAHpB,SAKG,gBAAGmB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMN,SAAUI,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGC,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWC,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,aAAa,iBAGjB,SAAC,KAAD,CAAcH,KAAK,WAEnB,UAAC,KAAD,CAAaI,YAAaZ,EAAOrB,UAAYsB,EAAQtB,SAArD,WACE,SAAC,KAAD,CAAWyB,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRC,aAAa,sBAEf,SAAC,KAAD,CAAcH,KAAK,iBAGrB,SAAC,KAAD,CAAQC,KAAK,SAASI,YAAY,SAASC,MAAM,OAAjD,uBA7BL,OAwEV,C,2FCvHM,SAAStB,EAAT,GAA8D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,OAAmC,IAA3BoB,MAAAA,OAA2B,MAAnB,MAAmB,EAAZC,EAAY,EAAZA,SACtD,OACE,UAAC,KAAD,CACE1B,GAAG,QACH2B,EAAG,EACHC,QAAQ,KACRC,EAAGJ,EACHvB,EAAGG,EACHyB,GAAG,QACHC,UAAU,SAPZ,WASE,SAAC,KAAD,CAASf,GAAG,KAAKgB,GAAG,OAApB,SACG5B,IAEFsB,IAGN,C","sources":["components/LogInForm/LogInForm.jsx","components/Section/Section.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { logIn } from 'redux/auth/authOperation';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Section } from 'components/Section/Section';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Please enter the email')\n    .matches(\n      /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-z]+)$/,\n      'Not correct email'\n    ),\n\n  password: Yup.string()\n    .required('Please enter the password')\n    .min(6, 'Password of phone must have more then 6 number')\n    .max(14, 'Password of phone must have less then 15 number'),\n});\n\nconst LogInForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (user, { resetForm }) => {\n    dispatch(logIn(user));\n    resetForm();\n  };\n\n  return (\n    <Flex bg=\"gray.100\" justify=\"center\" h=\"100vh\">\n      <Section title=\"Log In\" height={350}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={6} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    autoComplete=\"username\"\n                  />\n                </FormControl>\n                <ErrorMessage name=\"email\" />\n\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    autoComplete=\"current-password\"\n                  />\n                  <ErrorMessage name=\"password\" />\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Section>\n    </Flex>\n    // <Section title=\"Log In\">\n    //   <Formik\n    //     initialValues={initialValues}\n    //     onSubmit={handleSubmit}\n    //     validationSchema={validationSchema}\n    //   >\n    //     <Form className={css.form}>\n    //       <label className={css.label}>\n    //         Email\n    //         <Field\n    //           className={css.input}\n    //           type=\"email\"\n    //           name=\"email\"\n    //           autoComplete=\"username\"\n    //         />\n    //         <ErrorMessage name=\"email\" />\n    //       </label>\n    //       <label className={css.label}>\n    //         Password\n    //         <Field\n    //           className={css.input}\n    //           type=\"password\"\n    //           name=\"password\"\n    //           autoComplete=\"current-password\"\n    //         />\n    //         <ErrorMessage name=\"password\" />\n    //       </label>\n    //       <button className={css.btnSubmit} type=\"submit\">\n    //         Log In\n    //       </button>\n    //     </Form>\n    //   </Formik>\n    // </Section>\n  );\n};\n\nexport default LogInForm;\n","import { PropTypes } from 'prop-types';\nimport { Box, Heading } from '@chakra-ui/react';\nexport function Section({ title, height, width = '300', children }) {\n  return (\n    <Box\n      bg=\"white\"\n      p={8}\n      rounded=\"md\"\n      w={width}\n      h={height}\n      mt=\"200px\"\n      textAlign=\"center\"\n    >\n      <Heading as=\"h2\" mb=\"20px\">\n        {title}\n      </Heading>\n      {children}\n    </Box>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n"],"names":["initialValues","email","password","validationSchema","Yup","shape","required","matches","min","max","dispatch","useDispatch","bg","justify","h","Section","title","height","onSubmit","user","resetForm","logIn","handleSubmit","errors","touched","spacing","align","htmlFor","as","Input","id","name","type","variant","autoComplete","isInvalid","colorScheme","width","children","p","rounded","w","mt","textAlign","mb"],"sourceRoot":""}